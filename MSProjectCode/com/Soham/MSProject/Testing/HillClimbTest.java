package com.Soham.MSProject.Testing;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import org.junit.BeforeClass;
import org.junit.Test;

import com.Soham.MSProject.SimulationAlgorithm.HillClimbing;

public class HillClimbTest 
{
  private static HillClimbing hillClimb;
  
  @BeforeClass
  public static void initialize()
  {
    hillClimb = new HillClimbing();
  }
  
  @Test
  public void testNeighbours()
  {
    byte[][] expects = new byte[][]{new byte[]{(byte)0x81}, new byte[]{0x41}, new byte[]{0x21},
        new byte[]{0x11}, new byte[]{0x09}, new byte[]{0x05}, new byte[]{0x03}, new byte[]{0x00},
        new byte[]{(byte)0xC1}, new byte[]{(byte)0xA1}, new byte[]{(byte)0x91}, new byte[]{(byte)0x89},
        new byte[]{(byte)0x85}, new byte[]{(byte)0x83}, new byte[]{(byte)0x80}, new byte[]{0x61},
        new byte[]{0x51}, new byte[]{0x49}, new byte[]{0x45}, new byte[]{0x43}, new byte[]{0x40},
        new byte[]{0x31}, new byte[]{0x29}, new byte[]{0x25}, new byte[]{0x23}, new byte[]{0x20},
        new byte[]{0x19}, new byte[]{0x15}, new byte[]{0x13}, new byte[]{0x10}, new byte[]{0x0D},
        new byte[]{0x0B}, new byte[]{0x08}, new byte[]{0x07}, new byte[]{0x04}, new byte[]{0x02}
    };
    byte[][] actual = hillClimb.getNeighbours( new byte[]{ 0x01 });
    assertEquals( expects.length, actual.length );
    for( int i = 0; i < actual.length; i++ ) {
      assertArrayEquals( expects[i], actual[i] );
    }
    expects = new byte[][]{new byte[]{(byte)0x81, 0x01}, new byte[]{0x41, 0x01},
        new byte[]{0x21, 0x01}, new byte[]{0x11, 0x01}, new byte[]{0x09, 0x01},
        new byte[]{0x05, 0x01}, new byte[]{0x03, 0x01}, new byte[]{0x00, 0x01},
        new byte[]{0x01, (byte)0x81}, new byte[]{0x01, 0x41}, new byte[]{0x01, 0x21},
        new byte[]{0x01, 0x11}, new byte[]{0x01, 0x09}, new byte[]{0x01, 0x05},
        new byte[]{0x01, 0x03}, new byte[]{0x01, 0x00}, new byte[]{(byte)0xC1, 0x01},
        new byte[]{(byte)0xA1, 0x01}, new byte[]{(byte)0x91, 0x01}, new byte[]{(byte)0x89, 0x01},
        new byte[]{(byte)0x85, 0x01}, new byte[]{(byte)0x83, 0x01}, new byte[]{(byte)0x80, 0x01},
        new byte[]{(byte)0x81, (byte)0x81}, new byte[]{(byte)0x81, 0x41}, new byte[]{(byte)0x81, 0x21},
        new byte[]{(byte)0x81, 0x11}, new byte[]{(byte)0x81, 0x09}, new byte[]{(byte)0x81, 0x05},
        new byte[]{(byte)0x81, 0x03}, new byte[]{(byte)0x81, 0x00}, new byte[]{0x61, 0x01},
        new byte[]{0x51, 0x01}, new byte[]{0x49, 0x01}, new byte[]{0x45, 0x01}, new byte[]{0x43, 0x01},
        new byte[]{0x40, 0x01}, new byte[]{0x41, (byte)0x81}, new byte[]{0x41, 0x41}, 
        new byte[]{0x41, 0x21}, new byte[]{0x41, 0x11}, new byte[]{0x41, 0x09}, new byte[]{0x41, 0x05},
        new byte[]{0x41, 0x03}, new byte[]{0x41, 0x00}, new byte[]{0x31, 0x01}, new byte[]{0x29, 0x01},
        new byte[]{0x25, 0x01}, new byte[]{0x23, 0x01}, new byte[]{0x20, 0x01}, new byte[]{0x21, (byte)0x81}, 
        new byte[]{0x21, 0x41}, new byte[]{0x21, 0x21}, new byte[]{0x21, 0x11}, new byte[]{0x21, 0x09}, 
        new byte[]{0x21, 0x05}, new byte[]{0x21, 0x03}, new byte[]{0x21, 0x00}, new byte[]{0x19, 0x01}, 
        new byte[]{0x15, 0x01}, new byte[]{0x13, 0x01}, new byte[]{0x10, 0x01}, new byte[]{0x11, (byte)0x81}, 
        new byte[]{0x11, 0x41}, new byte[]{0x11, 0x21}, new byte[]{0x11, 0x11}, new byte[]{0x11, 0x09}, 
        new byte[]{0x11, 0x05}, new byte[]{0x11, 0x03}, new byte[]{0x11, 0x00}, new byte[]{0x0D, 0x01},
        new byte[]{0x0B, 0x01}, new byte[]{0x08, 0x01}, new byte[]{0x09, (byte)0x81}, new byte[]{0x09, 0x41}, 
        new byte[]{0x09, 0x21}, new byte[]{0x09, 0x11}, new byte[]{0x09, 0x09}, new byte[]{0x09, 0x05},
        new byte[]{0x09, 0x03}, new byte[]{0x09, 0x00}, new byte[]{0x07, 0x01}, new byte[]{0x04, 0x01}, 
        new byte[]{0x05, (byte)0x81}, new byte[]{0x05, 0x41}, new byte[]{0x05, 0x21}, new byte[]{0x05, 0x11}, 
        new byte[]{0x05, 0x09}, new byte[]{0x05, 0x05}, new byte[]{0x05, 0x03}, new byte[]{0x05, 0x00}, 
        new byte[]{0x02, 0x01}, new byte[]{0x03, (byte)0x81}, new byte[]{0x03, 0x41}, new byte[]{0x03, 0x21},
        new byte[]{0x03, 0x11}, new byte[]{0x03, 0x09}, new byte[]{0x03, 0x05}, new byte[]{0x03, 0x03}, 
        new byte[]{0x03, 0x00}, new byte[]{0x00, (byte)0x81}, new byte[]{0x00, 0x41}, new byte[]{0x00, 0x21},
        new byte[]{0x00, 0x11}, new byte[]{0x00, 0x09}, new byte[]{0x00, 0x05}, new byte[]{0x00, 0x03}, 
        new byte[]{0x00, 0x00}, new byte[]{0x01, (byte)0xC1}, new byte[]{0x01, (byte)0xA1}, 
        new byte[]{0x01, (byte)0x91}, new byte[]{0x01, (byte)0x89}, new byte[]{0x01, (byte)0x85}, 
        new byte[]{0x01, (byte)0x83}, new byte[]{0x01, (byte)0x80}, new byte[]{0x01, 0x61},
        new byte[]{0x01, 0x51}, new byte[]{0x01, 0x49}, new byte[]{0x01, 0x45}, new byte[]{0x01, 0x43},
        new byte[]{0x01, 0x40}, new byte[]{0x01, 0x31}, new byte[]{0x01, 0x29}, new byte[]{0x01, 0x25},
        new byte[]{0x01, 0x23}, new byte[]{0x01, 0x20}, new byte[]{0x01, 0x19}, new byte[]{0x01, 0x15},
        new byte[]{0x01, 0x13}, new byte[]{0x01, 0x10}, new byte[]{0x01, 0x0D}, new byte[]{0x01, 0x0B},
        new byte[]{0x01, 0x08}, new byte[]{0x01, 0x07}, new byte[]{0x01, 0x04}, new byte[]{0x01, 0x02}};
    actual = hillClimb.getNeighbours( new byte[]{ 0x01, 0x01 });
    assertEquals( expects.length, actual.length );
    for( int i = 0; i < actual.length; i++ ) {
      assertArrayEquals( expects[i], actual[i] );
    }
  }
}