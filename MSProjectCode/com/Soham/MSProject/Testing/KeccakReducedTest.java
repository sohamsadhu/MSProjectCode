package com.Soham.MSProject.Testing;

import static org.junit.Assert.assertArrayEquals;

import org.junit.BeforeClass;
import org.junit.Test;

import com.Soham.MSProject.SHA3.Keccak200;
import com.Soham.MSProject.SHA3.Keccak400;
import com.Soham.MSProject.SHA3.Keccak800;

/**
 * Test all the reduced state versions of Keccak. The expected strings are collected, by running
 * the python implementation of Keccak.
 * @author Soham
 */
public class KeccakReducedTest 
{
  private static Keccak200 keccak200;   // Reduced Keccak version for state 200 bits
  private static Keccak400 keccak400;   // Keccak state of 400 bits
  private static Keccak800 keccak800;   // and Keccak state of 800 bits.
  
  @BeforeClass
  public static void initialise()
  {
    keccak200 = new Keccak200();
    keccak400 = new Keccak400();
    keccak800 = new Keccak800();
  }
  
  @Test
  public void testKeccak200SmallString()
  {
    byte[] expects = keccak200.convertHexStringToBytes("788E37489BA6B33D9C194041A11E594AF78323"
        + "17DCB79E95E903CB87");
    assertArrayEquals( expects, keccak200.hash("00112233445566778899AABBCCDDEEFF", 224, 0));
    expects = keccak200.convertHexStringToBytes("8CFCA1B944AA52B92B1220097B71E1BF28F2A4001CF06"
        + "5DFE4C6407555E7F655");
    assertArrayEquals( expects, keccak200.hash("00112233445566778899AABBCCDDEEFF", 256, 0));
    expects = keccak200.convertHexStringToBytes("FC95D8C0CF89105400B2B196B8941D95CF099856F81F4"
        + "12C1BB88C3B5524042E83773FC039D57219DC0E82E2C05CB7FA");
    assertArrayEquals( expects, keccak200.hash("00112233445566778899AABBCCDDEEFF", 384, 0));
    expects = keccak200.convertHexStringToBytes("0F6EFF80FD614F3CD963CB0D1D14B7ABDC8D678FBE263"
        + "65229232DB54BAAC2EB91B24C7053791865023C45E3A278FF3FDFD27C90B33FCBAF95AD426FA5E1A89F");
    assertArrayEquals( expects, keccak200.hash("00112233445566778899AABBCCDDEEFF", 512, 0));
  }
  
  @Test
  public void testKeccak200LargeString()
  {
    byte[] expects = keccak200.convertHexStringToBytes("2348DBD78A475FBDE0769C37F952403C2D44266B"
        + "81CE748F62C778B4");
    assertArrayEquals( expects, keccak200.hash("4C6F72656D20697073756D20646F6C6F722073697420616"
        + "D65742C20636F6E73656374657475722061646970697363696E6720656C69742E20446F6E656320612064"
        + "69616D206C65637475732E205365642073697420616D657420697073756D206D61757269732E204D6165"
        + "63656E617320636F6E6775", 224, 0));
    expects = keccak200.convertHexStringToBytes("6A1B9D080C12C62A73E78C3D9F52AECEB83B7D01DC90A0"
        + "AFC783B17254A322D1");
    assertArrayEquals( expects, keccak200.hash("4C6F72656D20697073756D20646F6C6F722073697420616"
        + "D65742C20636F6E73656374657475722061646970697363696E6720656C69742E20446F6E656320612064"
        + "69616D206C65637475732E205365642073697420616D657420697073756D206D61757269732E204D6165"
        + "63656E617320636F6E6775", 256, 0));
    expects = keccak200.convertHexStringToBytes("2F4CBF2A2B896623726B58581BEB18D3E5FD42DADC97D72"
        + "602CF6AF85174A25631DC1237410778D7829C1D85C1FF0B7E");
    assertArrayEquals( expects, keccak200.hash("4C6F72656D20697073756D20646F6C6F722073697420616"
        + "D65742C20636F6E73656374657475722061646970697363696E6720656C69742E20446F6E656320612064"
        + "69616D206C65637475732E205365642073697420616D657420697073756D206D61757269732E204D6165"
        + "63656E617320636F6E6775", 384, 0));
    expects = keccak200.convertHexStringToBytes("F90D94F61C04A990BA5E46B0782D5172395F63715FF83F"
        + "02780FC2B1CEE611A2FB3E5D99618C93DE38273286966D9410AE93F8762613F2277B22CE829211CAE3");
    assertArrayEquals( expects, keccak200.hash("4C6F72656D20697073756D20646F6C6F722073697420616"
        + "D65742C20636F6E73656374657475722061646970697363696E6720656C69742E20446F6E656320612064"
        + "69616D206C65637475732E205365642073697420616D657420697073756D206D61757269732E204D6165"
        + "63656E617320636F6E6775", 512, 0));
  }
  
  @Test
  public void testKeccak400SmallString()
  {
    byte[] expects = keccak400.convertHexStringToBytes("C53356BA2CDC44997CA060AAAD40034CA24A"
        + "C5E7250A35D61374D013");
    assertArrayEquals( expects, keccak400.hash("00112233445566778899AABBCCDDEEFF", 224, 0));
    expects = keccak400.convertHexStringToBytes("B0C2474DDC86C6F4D2A7CBD9C10E0F55E05709D19A79"
        + "67CC83DAE57EF01AC1F5");
    assertArrayEquals( expects, keccak400.hash("00112233445566778899AABBCCDDEEFF", 256, 0));
    expects = keccak400.convertHexStringToBytes("3780C436671675349F0C9C3446FFE8FE399D1D3CD69BD"
        + "74B29A3522E2F701821FEF2C3735ADF8F71A6F59A100906118E");
    assertArrayEquals( expects, keccak400.hash("00112233445566778899AABBCCDDEEFF", 384, 0));
    expects = keccak400.convertHexStringToBytes("9A275648740A0382AC60931BA68F34411ABD56E1C3BA5"
        + "ABA0D603D8EE2773AD2204ED15EF8D5DB2B6BE7067EE704F2BA13B73616EF2BCA3AFD02F82E9E2C756B");
    assertArrayEquals( expects, keccak400.hash("00112233445566778899AABBCCDDEEFF", 512, 0));
  }
  
  @Test
  public void testKeccak400LargeString()
  {
    byte[] expects = keccak400.convertHexStringToBytes("F88AB8FB53CD5AA241B680B82E261F8C104EC434"
        + "118722B4384822F3");
    assertArrayEquals( expects, keccak400.hash("4C6F72656D20697073756D20646F6C6F722073697420616"
        + "D65742C20636F6E73656374657475722061646970697363696E6720656C69742E20446F6E656320612064"
        + "69616D206C65637475732E205365642073697420616D657420697073756D206D61757269732E204D6165"
        + "63656E617320636F6E6775", 224, 0));
    expects = keccak400.convertHexStringToBytes("DD626A3824AB9C08AC94B14349A5E54A1D62B37BDCACD02"
        + "55B6F94EF1349737D");
    assertArrayEquals( expects, keccak400.hash("4C6F72656D20697073756D20646F6C6F722073697420616"
        + "D65742C20636F6E73656374657475722061646970697363696E6720656C69742E20446F6E656320612064"
        + "69616D206C65637475732E205365642073697420616D657420697073756D206D61757269732E204D6165"
        + "63656E617320636F6E6775", 256, 0));
    expects = keccak400.convertHexStringToBytes("F2CE38FCF2DEBAE4E187E8657E9304540804032D929DD1A"
        + "DE19189A22B2A29E587E4B063507AB85767F296FC233956A7");
    assertArrayEquals( expects, keccak400.hash("4C6F72656D20697073756D20646F6C6F722073697420616"
        + "D65742C20636F6E73656374657475722061646970697363696E6720656C69742E20446F6E656320612064"
        + "69616D206C65637475732E205365642073697420616D657420697073756D206D61757269732E204D6165"
        + "63656E617320636F6E6775", 384, 0));
    expects = keccak400.convertHexStringToBytes("0DF503A1A2A3ED333F91FC884046F9B1BD7AD744BC97B88"
        + "EE3329213C70126BE5C7640F68A676EEA533D937925390AE82CE95262BA815A04DFA1635D1C77441E");
    assertArrayEquals( expects, keccak400.hash("4C6F72656D20697073756D20646F6C6F722073697420616"
        + "D65742C20636F6E73656374657475722061646970697363696E6720656C69742E20446F6E656320612064"
        + "69616D206C65637475732E205365642073697420616D657420697073756D206D61757269732E204D6165"
        + "63656E617320636F6E6775", 512, 0));
  }
  
  @Test
  public void testKeccak800SmallString()
  {
    byte[] expects = keccak800.convertHexStringToBytes("2848B09F74A9E2ADEC6EC0D96FAABFEFDA"
        + "4DABF3D7F1D6AA4A29635A");
    assertArrayEquals( expects, keccak800.hash("00112233445566778899AABBCCDDEEFF", 224, 0));
    expects = keccak800.convertHexStringToBytes("9DD5BA4B4019AF9287759B7DB20FDCC3E028A47FB0"
        + "51C05E819A90908ECFC705");
    assertArrayEquals( expects, keccak800.hash("00112233445566778899AABBCCDDEEFF", 256, 0));
    expects = keccak800.convertHexStringToBytes("CC5715E561D5818924A268BB5CDE58D4D6FDE44EA"
        + "9CE2BEE38264FF4C4D9B71C7BAE61DFC12D0A7B3F413C320BFB2201");
    assertArrayEquals( expects, keccak800.hash("00112233445566778899AABBCCDDEEFF", 384, 0));
    expects = keccak800.convertHexStringToBytes("BFA1505C5E2080B66200AD8D93D08D043927A03844"
        + "803A616A7591FE1395EBE990AAAE5381C2C21D60F9F8DF44C22F919D1271F7B73E0267CFC322CAC04"
        + "D4592");
    assertArrayEquals( expects, keccak800.hash("00112233445566778899AABBCCDDEEFF", 512, 0));
  }
  
  @Test
  public void testKeccak800LargeString()
  {
    byte[] expects = keccak800.convertHexStringToBytes("A738251BB329EBB8DFD4DDEB3595F1106B472C6"
        + "42748CDEBE047B81B");
    assertArrayEquals( expects, keccak800.hash("4C6F72656D20697073756D20646F6C6F722073697420616"
        + "D65742C20636F6E73656374657475722061646970697363696E6720656C69742E20446F6E656320612064"
        + "69616D206C65637475732E205365642073697420616D657420697073756D206D61757269732E204D6165"
        + "63656E617320636F6E6775", 224, 0));
    expects = keccak800.convertHexStringToBytes("E276D1A90FC8AC316335F14734C3F3774B0E3FF2DD35913"
        + "5C49700593509CE78");
    assertArrayEquals( expects, keccak800.hash("4C6F72656D20697073756D20646F6C6F722073697420616"
        + "D65742C20636F6E73656374657475722061646970697363696E6720656C69742E20446F6E656320612064"
        + "69616D206C65637475732E205365642073697420616D657420697073756D206D61757269732E204D6165"
        + "63656E617320636F6E6775", 256, 0));
    expects = keccak800.convertHexStringToBytes("3A58EEEF2F2E2BAB1C907E7DD4971EAA761C3E738F0B4CC"
        + "1192147690C90A31F00D23AAE936EF97613E1B1A9E5461A8B");
    assertArrayEquals( expects, keccak800.hash("4C6F72656D20697073756D20646F6C6F722073697420616"
        + "D65742C20636F6E73656374657475722061646970697363696E6720656C69742E20446F6E656320612064"
        + "69616D206C65637475732E205365642073697420616D657420697073756D206D61757269732E204D6165"
        + "63656E617320636F6E6775", 384, 0));
    expects = keccak800.convertHexStringToBytes("4D72400C9D8F8E8F1311B96166B6A25AF5DB6E063D89528"
        + "8C7C5EAB43460B4B18950809A91D98F8AD0542D28AFD77767158E61BAA129382D8108E15F8E63A93E");
    assertArrayEquals( expects, keccak800.hash("4C6F72656D20697073756D20646F6C6F722073697420616"
        + "D65742C20636F6E73656374657475722061646970697363696E6720656C69742E20446F6E656320612064"
        + "69616D206C65637475732E205365642073697420616D657420697073756D206D61757269732E204D6165"
        + "63656E617320636F6E6775", 512, 0));
  }
}